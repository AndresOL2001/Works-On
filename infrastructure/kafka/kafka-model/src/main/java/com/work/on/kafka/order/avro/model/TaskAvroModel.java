/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.work.on.kafka.order.avro.model;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class TaskAvroModel extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1254552434136152414L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TaskAvroModel\",\"namespace\":\"com.work.on.kafka.order.avro.model\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"logicalType\":\"uuid\"},{\"name\":\"name\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"description\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"polls\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"PollAvroModel\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"logicalType\":\"uuid\"},{\"name\":\"pollName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"questions\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"QuestionAvroModel\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"questionDesc\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"logicalType\":\"uuid\"},{\"name\":\"answer\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}}}]}}},{\"name\":\"files\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"FileAssignmentAvroModel\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"logicalType\":\"uuid\"}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<TaskAvroModel> ENCODER =
      new BinaryMessageEncoder<TaskAvroModel>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TaskAvroModel> DECODER =
      new BinaryMessageDecoder<TaskAvroModel>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<TaskAvroModel> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<TaskAvroModel> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<TaskAvroModel> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<TaskAvroModel>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this TaskAvroModel to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a TaskAvroModel from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a TaskAvroModel instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static TaskAvroModel fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.String id;
  private java.lang.String name;
  private java.lang.String description;
  private java.util.List<com.work.on.kafka.order.avro.model.PollAvroModel> polls;
  private java.util.List<com.work.on.kafka.order.avro.model.FileAssignmentAvroModel> files;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TaskAvroModel() {}

  /**
   * All-args constructor.
   * @param id The new value for id
   * @param name The new value for name
   * @param description The new value for description
   * @param polls The new value for polls
   * @param files The new value for files
   */
  public TaskAvroModel(java.lang.String id, java.lang.String name, java.lang.String description, java.util.List<com.work.on.kafka.order.avro.model.PollAvroModel> polls, java.util.List<com.work.on.kafka.order.avro.model.FileAssignmentAvroModel> files) {
    this.id = id;
    this.name = name;
    this.description = description;
    this.polls = polls;
    this.files = files;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return name;
    case 2: return description;
    case 3: return polls;
    case 4: return files;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: id = value$ != null ? value$.toString() : null; break;
    case 1: name = value$ != null ? value$.toString() : null; break;
    case 2: description = value$ != null ? value$.toString() : null; break;
    case 3: polls = (java.util.List<com.work.on.kafka.order.avro.model.PollAvroModel>)value$; break;
    case 4: files = (java.util.List<com.work.on.kafka.order.avro.model.FileAssignmentAvroModel>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public java.lang.String getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.String value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.String getName() {
    return name;
  }


  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.String value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'description' field.
   * @return The value of the 'description' field.
   */
  public java.lang.String getDescription() {
    return description;
  }


  /**
   * Sets the value of the 'description' field.
   * @param value the value to set.
   */
  public void setDescription(java.lang.String value) {
    this.description = value;
  }

  /**
   * Gets the value of the 'polls' field.
   * @return The value of the 'polls' field.
   */
  public java.util.List<com.work.on.kafka.order.avro.model.PollAvroModel> getPolls() {
    return polls;
  }


  /**
   * Sets the value of the 'polls' field.
   * @param value the value to set.
   */
  public void setPolls(java.util.List<com.work.on.kafka.order.avro.model.PollAvroModel> value) {
    this.polls = value;
  }

  /**
   * Gets the value of the 'files' field.
   * @return The value of the 'files' field.
   */
  public java.util.List<com.work.on.kafka.order.avro.model.FileAssignmentAvroModel> getFiles() {
    return files;
  }


  /**
   * Sets the value of the 'files' field.
   * @param value the value to set.
   */
  public void setFiles(java.util.List<com.work.on.kafka.order.avro.model.FileAssignmentAvroModel> value) {
    this.files = value;
  }

  /**
   * Creates a new TaskAvroModel RecordBuilder.
   * @return A new TaskAvroModel RecordBuilder
   */
  public static com.work.on.kafka.order.avro.model.TaskAvroModel.Builder newBuilder() {
    return new com.work.on.kafka.order.avro.model.TaskAvroModel.Builder();
  }

  /**
   * Creates a new TaskAvroModel RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TaskAvroModel RecordBuilder
   */
  public static com.work.on.kafka.order.avro.model.TaskAvroModel.Builder newBuilder(com.work.on.kafka.order.avro.model.TaskAvroModel.Builder other) {
    if (other == null) {
      return new com.work.on.kafka.order.avro.model.TaskAvroModel.Builder();
    } else {
      return new com.work.on.kafka.order.avro.model.TaskAvroModel.Builder(other);
    }
  }

  /**
   * Creates a new TaskAvroModel RecordBuilder by copying an existing TaskAvroModel instance.
   * @param other The existing instance to copy.
   * @return A new TaskAvroModel RecordBuilder
   */
  public static com.work.on.kafka.order.avro.model.TaskAvroModel.Builder newBuilder(com.work.on.kafka.order.avro.model.TaskAvroModel other) {
    if (other == null) {
      return new com.work.on.kafka.order.avro.model.TaskAvroModel.Builder();
    } else {
      return new com.work.on.kafka.order.avro.model.TaskAvroModel.Builder(other);
    }
  }

  /**
   * RecordBuilder for TaskAvroModel instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TaskAvroModel>
    implements org.apache.avro.data.RecordBuilder<TaskAvroModel> {

    private java.lang.String id;
    private java.lang.String name;
    private java.lang.String description;
    private java.util.List<com.work.on.kafka.order.avro.model.PollAvroModel> polls;
    private java.util.List<com.work.on.kafka.order.avro.model.FileAssignmentAvroModel> files;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.work.on.kafka.order.avro.model.TaskAvroModel.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.description)) {
        this.description = data().deepCopy(fields()[2].schema(), other.description);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.polls)) {
        this.polls = data().deepCopy(fields()[3].schema(), other.polls);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.files)) {
        this.files = data().deepCopy(fields()[4].schema(), other.files);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing TaskAvroModel instance
     * @param other The existing instance to copy.
     */
    private Builder(com.work.on.kafka.order.avro.model.TaskAvroModel other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.name)) {
        this.name = data().deepCopy(fields()[1].schema(), other.name);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.description)) {
        this.description = data().deepCopy(fields()[2].schema(), other.description);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.polls)) {
        this.polls = data().deepCopy(fields()[3].schema(), other.polls);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.files)) {
        this.files = data().deepCopy(fields()[4].schema(), other.files);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public java.lang.String getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public com.work.on.kafka.order.avro.model.TaskAvroModel.Builder setId(java.lang.String value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public com.work.on.kafka.order.avro.model.TaskAvroModel.Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.String getName() {
      return name;
    }


    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public com.work.on.kafka.order.avro.model.TaskAvroModel.Builder setName(java.lang.String value) {
      validate(fields()[1], value);
      this.name = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public com.work.on.kafka.order.avro.model.TaskAvroModel.Builder clearName() {
      name = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'description' field.
      * @return The value.
      */
    public java.lang.String getDescription() {
      return description;
    }


    /**
      * Sets the value of the 'description' field.
      * @param value The value of 'description'.
      * @return This builder.
      */
    public com.work.on.kafka.order.avro.model.TaskAvroModel.Builder setDescription(java.lang.String value) {
      validate(fields()[2], value);
      this.description = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'description' field has been set.
      * @return True if the 'description' field has been set, false otherwise.
      */
    public boolean hasDescription() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'description' field.
      * @return This builder.
      */
    public com.work.on.kafka.order.avro.model.TaskAvroModel.Builder clearDescription() {
      description = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'polls' field.
      * @return The value.
      */
    public java.util.List<com.work.on.kafka.order.avro.model.PollAvroModel> getPolls() {
      return polls;
    }


    /**
      * Sets the value of the 'polls' field.
      * @param value The value of 'polls'.
      * @return This builder.
      */
    public com.work.on.kafka.order.avro.model.TaskAvroModel.Builder setPolls(java.util.List<com.work.on.kafka.order.avro.model.PollAvroModel> value) {
      validate(fields()[3], value);
      this.polls = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'polls' field has been set.
      * @return True if the 'polls' field has been set, false otherwise.
      */
    public boolean hasPolls() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'polls' field.
      * @return This builder.
      */
    public com.work.on.kafka.order.avro.model.TaskAvroModel.Builder clearPolls() {
      polls = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'files' field.
      * @return The value.
      */
    public java.util.List<com.work.on.kafka.order.avro.model.FileAssignmentAvroModel> getFiles() {
      return files;
    }


    /**
      * Sets the value of the 'files' field.
      * @param value The value of 'files'.
      * @return This builder.
      */
    public com.work.on.kafka.order.avro.model.TaskAvroModel.Builder setFiles(java.util.List<com.work.on.kafka.order.avro.model.FileAssignmentAvroModel> value) {
      validate(fields()[4], value);
      this.files = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'files' field has been set.
      * @return True if the 'files' field has been set, false otherwise.
      */
    public boolean hasFiles() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'files' field.
      * @return This builder.
      */
    public com.work.on.kafka.order.avro.model.TaskAvroModel.Builder clearFiles() {
      files = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TaskAvroModel build() {
      try {
        TaskAvroModel record = new TaskAvroModel();
        record.id = fieldSetFlags()[0] ? this.id : (java.lang.String) defaultValue(fields()[0]);
        record.name = fieldSetFlags()[1] ? this.name : (java.lang.String) defaultValue(fields()[1]);
        record.description = fieldSetFlags()[2] ? this.description : (java.lang.String) defaultValue(fields()[2]);
        record.polls = fieldSetFlags()[3] ? this.polls : (java.util.List<com.work.on.kafka.order.avro.model.PollAvroModel>) defaultValue(fields()[3]);
        record.files = fieldSetFlags()[4] ? this.files : (java.util.List<com.work.on.kafka.order.avro.model.FileAssignmentAvroModel>) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TaskAvroModel>
    WRITER$ = (org.apache.avro.io.DatumWriter<TaskAvroModel>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TaskAvroModel>
    READER$ = (org.apache.avro.io.DatumReader<TaskAvroModel>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.id);

    out.writeString(this.name);

    out.writeString(this.description);

    long size0 = this.polls.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (com.work.on.kafka.order.avro.model.PollAvroModel e0: this.polls) {
      actualSize0++;
      out.startItem();
      e0.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    long size1 = this.files.size();
    out.writeArrayStart();
    out.setItemCount(size1);
    long actualSize1 = 0;
    for (com.work.on.kafka.order.avro.model.FileAssignmentAvroModel e1: this.files) {
      actualSize1++;
      out.startItem();
      e1.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize1 != size1)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size1 + ", but element count was " + actualSize1 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.id = in.readString();

      this.name = in.readString();

      this.description = in.readString();

      long size0 = in.readArrayStart();
      java.util.List<com.work.on.kafka.order.avro.model.PollAvroModel> a0 = this.polls;
      if (a0 == null) {
        a0 = new SpecificData.Array<com.work.on.kafka.order.avro.model.PollAvroModel>((int)size0, SCHEMA$.getField("polls").schema());
        this.polls = a0;
      } else a0.clear();
      SpecificData.Array<com.work.on.kafka.order.avro.model.PollAvroModel> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.work.on.kafka.order.avro.model.PollAvroModel>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          com.work.on.kafka.order.avro.model.PollAvroModel e0 = (ga0 != null ? ga0.peek() : null);
          if (e0 == null) {
            e0 = new com.work.on.kafka.order.avro.model.PollAvroModel();
          }
          e0.customDecode(in);
          a0.add(e0);
        }
      }

      long size1 = in.readArrayStart();
      java.util.List<com.work.on.kafka.order.avro.model.FileAssignmentAvroModel> a1 = this.files;
      if (a1 == null) {
        a1 = new SpecificData.Array<com.work.on.kafka.order.avro.model.FileAssignmentAvroModel>((int)size1, SCHEMA$.getField("files").schema());
        this.files = a1;
      } else a1.clear();
      SpecificData.Array<com.work.on.kafka.order.avro.model.FileAssignmentAvroModel> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<com.work.on.kafka.order.avro.model.FileAssignmentAvroModel>)a1 : null);
      for ( ; 0 < size1; size1 = in.arrayNext()) {
        for ( ; size1 != 0; size1--) {
          com.work.on.kafka.order.avro.model.FileAssignmentAvroModel e1 = (ga1 != null ? ga1.peek() : null);
          if (e1 == null) {
            e1 = new com.work.on.kafka.order.avro.model.FileAssignmentAvroModel();
          }
          e1.customDecode(in);
          a1.add(e1);
        }
      }

    } else {
      for (int i = 0; i < 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.id = in.readString();
          break;

        case 1:
          this.name = in.readString();
          break;

        case 2:
          this.description = in.readString();
          break;

        case 3:
          long size0 = in.readArrayStart();
          java.util.List<com.work.on.kafka.order.avro.model.PollAvroModel> a0 = this.polls;
          if (a0 == null) {
            a0 = new SpecificData.Array<com.work.on.kafka.order.avro.model.PollAvroModel>((int)size0, SCHEMA$.getField("polls").schema());
            this.polls = a0;
          } else a0.clear();
          SpecificData.Array<com.work.on.kafka.order.avro.model.PollAvroModel> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<com.work.on.kafka.order.avro.model.PollAvroModel>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              com.work.on.kafka.order.avro.model.PollAvroModel e0 = (ga0 != null ? ga0.peek() : null);
              if (e0 == null) {
                e0 = new com.work.on.kafka.order.avro.model.PollAvroModel();
              }
              e0.customDecode(in);
              a0.add(e0);
            }
          }
          break;

        case 4:
          long size1 = in.readArrayStart();
          java.util.List<com.work.on.kafka.order.avro.model.FileAssignmentAvroModel> a1 = this.files;
          if (a1 == null) {
            a1 = new SpecificData.Array<com.work.on.kafka.order.avro.model.FileAssignmentAvroModel>((int)size1, SCHEMA$.getField("files").schema());
            this.files = a1;
          } else a1.clear();
          SpecificData.Array<com.work.on.kafka.order.avro.model.FileAssignmentAvroModel> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<com.work.on.kafka.order.avro.model.FileAssignmentAvroModel>)a1 : null);
          for ( ; 0 < size1; size1 = in.arrayNext()) {
            for ( ; size1 != 0; size1--) {
              com.work.on.kafka.order.avro.model.FileAssignmentAvroModel e1 = (ga1 != null ? ga1.peek() : null);
              if (e1 == null) {
                e1 = new com.work.on.kafka.order.avro.model.FileAssignmentAvroModel();
              }
              e1.customDecode(in);
              a1.add(e1);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










